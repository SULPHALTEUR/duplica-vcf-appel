def parse_vcf(filename):
    """
    Parse le fichier VCF et retourne une liste de dictionnaires représentant chaque vCard.
    """
    vcards = []
    with open(filename, 'r', encoding='utf-8') as file:
        vcard = {}
        note_seen = False  # Pour garder une trace de la clé NOTE
        item_seen = False  # Pour garder une trace de la clé item1
        for line in file:
            if line.startswith('BEGIN:VCARD'):
                if vcard:  # Si une vCard précédente est en cours, l'ajouter à la liste
                    vcards.append(vcard)
                vcard = {'BEGIN': 'VCARD'}  # Commencer une nouvelle vCard
                note_seen = False  # Réinitialiser la trace de la clé NOTE
                item_seen = False  # Réinitialiser la trace de la clé item1
            elif line.startswith('END:VCARD'):
                vcards.append(vcard)
            else:
                if ':' in line:
                    key, value = line.strip().split(':', 1)
                    if key == 'NOTE':
                        if note_seen and vcard.get(key, '') == value:  # Si NOTE a déjà été vu avec la même valeur, ignorer cette ligne
                            continue
                        note_seen = True
                    elif key.startswith('item1'):
                        if item_seen and vcard.get(key, '') == value:  # Si item1 a déjà été vu avec la même valeur, ignorer cette ligne
                            continue
                        item_seen = True
                    vcard[key] = value
                else:
                    if vcard:  # Vérifier si une vCard est déjà en cours de construction
                        vcard[key] += line.strip()  # Ajouter la ligne à la valeur précédente
    return vcards

def compare_vcards(vcard1, vcard2):
    """
    Compare deux vCards en se basant sur le champ 'N'.
    Retourne True si les vCards sont les mêmes, False sinon.
    """
    return vcard1.get('N') == vcard2.get('N')

def remove_duplicates(vcards):
    """
    Supprime les doublons dans la liste de vCards en conservant celui avec le moins de champs en cas de doublon.
    """
    unique_vcards = []
    for vcard in vcards:
        if not any(compare_vcards(vcard, unique_vcard) for unique_vcard in unique_vcards):
            unique_vcards.append(vcard)
        else:
            # Supprimer le doublon en conservant celui avec le moins de champs
            index = unique_vcards.index(next(unique_vcard for unique_vcard in unique_vcards if compare_vcards(vcard, unique_vcard)))
            if len(vcard) < len(unique_vcards[index]):
                unique_vcards[index] = vcard
    return unique_vcards

def write_vcards_to_files(vcards, batch_size):
    """
    Écrit les vCards dans des fichiers de sortie avec un maximum de 'batch_size' vCards par fichier.
    """
    for i in range(0, len(vcards), batch_size):
        with open(f'output_{i//batch_size + 1}.vcf', 'w', encoding='utf-8') as file:  # Spécifier l'encodage utf-8
            for vcard in vcards[i:i+batch_size]:
                for key, value in vcard.items():
                    file.write(f"{key}:{value}\n")
                file.write('END:VCARD\n')

def main():
    filename = 'contacts.vcf'  # Nom de votre fichier VCF en entrée
    batch_size = 200  # Nombre maximum de vCards par fichier de sortie
    vcards = parse_vcf(filename)
    unique_vcards = remove_duplicates(vcards)
    write_vcards_to_files(unique_vcards, batch_size)

if __name__ == "__main__":
    main()
