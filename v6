import vobject

# Définir le chemin du fichier d'entrée et le préfixe du nom des fichiers de sortie
input_file = "contacts.vcf"
output_prefix = "contacts_sans_duplication_"
max_contacts_per_file = 20000

# Initialiser le compteur de contacts total et l'ensemble des clés uniques
total_contacts_written = 0
unique_vcards = set()

# Lire le fichier VCF et traiter les contacts
with open(input_file, "r", encoding="utf-8") as vcf_file:
    components = vobject.readComponents(vcf_file)
    
    contact_count = 0
    file_index = 1
    
    for component in components:
        vcard_key = repr([prop.value for prop in component.getChildren()])
        
        if vcard_key not in unique_vcards:
            unique_vcards.add(vcard_key)
            contact_count += 1
            total_contacts_written += 1
            
            if contact_count > max_contacts_per_file:
                file_index += 1
                contact_count = 1
            
            output_file_path = f"{output_prefix}{file_index}.vcf"
            with open(output_file_path, "a", encoding="utf-8") as output_vcf:
                serialized_component = component.serialize()
                # Diviser en lignes, supprimer les lignes vides, et rejoindre avec un seul saut de ligne
                cleaned_component = "\n".join(filter(None, serialized_component.splitlines()))
                output_vcf.write(cleaned_component + "\n")  # Ajouter un saut de ligne final après la vCard

print(f"Tous les contacts ont été divisés en fichiers de {max_contacts_per_file} contacts maximum.")
print(f"Nombre total de contacts écrits dans les fichiers de sortie : {total_contacts_written}")
